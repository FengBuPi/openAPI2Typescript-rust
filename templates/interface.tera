declare namespace {{ namespace }} {
{%- for type in list %}
{%- if type.type_template %}
{%- if type.desc %}
  /** {{ type.desc }} */
{%- endif %}
{%- if type.type_template == "interface" %}
  interface {{ type.type_name  }} {
{%- for prop in type.props %}
{%- if prop.desc %}
    /** {{ prop.desc }} */
{%- endif %}
{%- if prop.required %}
    {{ prop.name }}: {{ prop.prop_type }};
{%- else %}
    {{ prop.name }}?: {{ prop.prop_type }};
{%- endif %}
{%- endfor %}
  }
{%- elif type.type_template == "type" %}
  type {{ type.type_name  }} = {
{%- for prop in type.props %}
{%- if prop.desc %}
    /** {{ prop.desc }} */
{%- endif %}
    '{{ prop.name }}': {{ prop.prop_type }};
{%- endfor %}
  };
{%- elif type.type_template == "enum" %}
  enum {{ type.type_name  }} {
{%- for prop in type.props %}
    {{ prop.name }} = "{{ prop.name }}",
{%- endfor %}
  }
{%- elif type.type_template == "const_as_enum" %}
  const {{ type.type_name  }}: {
{%- for prop in type.props %}
    readonly {{ prop.name }}: "{{ prop.name }}",
{%- endfor %}
  };
  type {{ type.type_name  }} = keyof typeof {{ type.type_name  }};
{%- elif type.type_template == "union" %}
  type {{ type.type_name  }} = 
{%- for prop in type.props %}
    '{{ prop.prop_type }}'{%- if not loop.last %} | {%- endif %}
{%- endfor %};
{%- endif %}
{%- else %}
  <!-- 默认模板 -->
{%- if type.desc %}
  /** {{ type.desc }} */
{%- endif %}
  interface {{ type.type_name  }} {
{%- for prop in type.props %}
{%- if prop.desc %}
    /** {{ prop.desc }} */
{%- endif %}
    {{ prop.name }}: {{ prop.prop_type }};
{%- endfor %}
  }
{%- endif %}
{%- endfor %}
}