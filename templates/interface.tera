{# 专一性设计模式的模板渲染逻辑：
对于每一个类型，根据type_kind字段来判断具体类型：
- object: 对象类型，包含props和object_type_template
- enum: 枚举类型，包含basic_type、values和enum_type_template  
- basic: 基本类型，只包含basic_type
#}
declare namespace {{ namespace }} {
  {%- for type in list %}
      {%- if type.desc %}
        /** {{ type.desc }} */
      {%- endif %}
    
    {#- 使用serde的tag功能来匹配不同类型 -#}
    {%- if type.type_kind == "object" %}
      {#- 对象类型渲染 -#}
      {%- if type.object_type_template == "interface" %}
        interface {{ type.type_name }} {
          {%- for prop in type.props %}
            {%- if prop.desc %}
              /** {{ prop.desc }} */
            {%- endif %}
            {%- if prop.required %}
              {{ prop.name }}: {{ prop.prop_type }};
            {%- else %}
              {{ prop.name }}?: {{ prop.prop_type }};
            {%- endif %}
          {%- endfor %}
        }
      {%- elif type.object_type_template == "type" %}
        type {{ type.type_name }} = {
          {%- for prop in type.props %}
            {%- if prop.desc %}
              /** {{ prop.desc }} */
            {%- endif %}
            '{{ prop.name }}': {{ prop.prop_type }};
          {%- endfor %}
        };
      {%- endif %}
        
    {%- elif type.type_kind == "enum" %}
      {#- 枚举类型渲染 -#}
      {%- if type.enum_type_template == "enum" %}
        enum {{ type.type_name }} {
          {%- for value in type.values %}
            {%- if value.name %}
              {{ value.name }} = {% if type.basic_type == "string" %}"{{ value.value }}"{% else %}{{ value.value }}{% endif %},
            {%- else %}
              VALUE_{{ loop.index }} = {% if type.basic_type == "string" %}"{{ value.value }}"{% else %}{{ value.value }}{% endif %},
            {%- endif %}
          {%- endfor %}
        }
      {%- elif type.enum_type_template == "const_as_enum" %}
        const {{ type.type_name }}: {
          {%- for value in type.values %}
            {%- if value.name %}
              readonly {{ value.name }}: {% if type.basic_type == "string" %}"{{ value.value }}"{% else %}{{ value.value }}{% endif %},
            {%- else %}
              readonly VALUE_{{ loop.index }}: {% if type.basic_type == "string" %}"{{ value.value }}"{% else %}{{ value.value }}{% endif %},
            {%- endif %}
          {%- endfor %}
        };
        type {{ type.type_name }} = keyof typeof {{ type.type_name }};
      {%- elif type.enum_type_template == "union" %}
        type {{ type.type_name }} = 
          {%- for value in type.values %}
            {% if type.basic_type == "string" %}"{{ value.value }}"{% else %}{{ value.value }}{% endif %}{%- if not loop.last %} | {%- endif %}
          {%- endfor %};
      {%- endif %}
        
    {%- elif type.type_kind == "basic" %}
      {#- 基本类型渲染 -#}
      type {{ type.type_name }} = {{ type.basic_type }};
    {%- endif %}
  {%- endfor %}
}